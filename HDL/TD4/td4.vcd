$date
	Mon Mar 15 22:16:24 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TOP $end
$var wire 4 ! led [3:0] $end
$var reg 1 " clk $end
$var reg 1 # n_reset $end
$var reg 4 $ switch [3:0] $end
$scope module motherboard $end
$var wire 1 " clk $end
$var wire 1 # n_reset $end
$var wire 4 % switch [3:0] $end
$var wire 4 & led [3:0] $end
$var wire 8 ' data [7:0] $end
$var wire 4 ( count [3:0] $end
$var wire 4 ) addr [3:0] $end
$scope module counter $end
$var wire 1 " clk $end
$var wire 1 # n_reset $end
$var reg 4 * count [3:0] $end
$upscope $end
$scope module cpu $end
$var wire 4 + addr [3:0] $end
$var wire 1 " clk $end
$var wire 4 , led [3:0] $end
$var wire 1 # n_reset $end
$var wire 4 - switch [3:0] $end
$var wire 4 . opecode [3:0] $end
$var wire 4 / imm [3:0] $end
$var wire 8 0 data [7:0] $end
$var reg 4 1 a [3:0] $end
$var reg 4 2 b [3:0] $end
$var reg 1 3 cf $end
$var reg 4 4 ip [3:0] $end
$var reg 4 5 next_a [3:0] $end
$var reg 4 6 next_b [3:0] $end
$var reg 1 7 next_cf $end
$var reg 4 8 next_ip [3:0] $end
$var reg 4 9 next_out [3:0] $end
$var reg 4 : out [3:0] $end
$upscope $end
$scope module rom $end
$var wire 4 ; addr [3:0] $end
$var reg 8 < data [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 <
bx ;
bx :
bx 9
bx 8
x7
bx 6
bx 5
bx 4
x3
bx 2
bx 1
b0 0
b0 /
b0 .
b1110 -
bx ,
bx +
b0 *
bx )
b0 (
b0 '
bx &
b1110 %
b1110 $
0#
0"
bx !
$end
#10
b110 .
b1100000 '
b1100000 0
b1100000 <
b0 9
b1 8
07
b1110 6
b0 5
b0 !
b0 &
b0 ,
b0 :
b0 )
b0 +
b0 ;
b0 4
03
b0 2
b0 1
1"
#15
1#
#20
0"
#30
b1110 9
b1001 .
b10010000 '
b10010000 0
b10010000 <
b10 8
b1 (
b1 *
b1 )
b1 +
b1 ;
b1 4
b1110 2
1"
#40
0"
#50
b1101 5
b1101 /
b11 .
b11 8
b111101 '
b111101 0
b111101 <
b10 (
b10 *
b1110 !
b1110 &
b1110 ,
b1110 :
b10 )
b10 +
b10 ;
b10 4
1"
#60
0"
#70
b1110 5
b1 /
b0 .
b1 '
b1 0
b1 <
b100 8
b11 (
b11 *
b11 )
b11 +
b11 ;
b11 4
b1101 1
1"
#80
0"
#90
b11 /
b1110 .
b11100011 '
b11100011 0
b11100011 <
b1110 5
b11 8
b100 (
b100 *
b100 )
b100 +
b100 ;
b100 4
b1110 1
1"
#100
0"
#110
b1111 5
b1 /
b0 .
b100 8
b1 '
b1 0
b1 <
b101 (
b101 *
b11 )
b11 +
b11 ;
b11 4
1"
#120
0"
#130
b11 /
b1110 .
b11100011 '
b11100011 0
b11100011 <
07
b1111 5
b11 8
b110 (
b110 *
b100 )
b100 +
b100 ;
b100 4
b1111 1
1"
#140
0"
#150
17
b0 5
b1 /
b0 .
b100 8
b1 '
b1 0
b1 <
b111 (
b111 *
b11 )
b11 +
b11 ;
b11 4
1"
#160
0"
#170
b11 /
b1110 .
b11100011 '
b11100011 0
b11100011 <
b0 5
b101 8
07
b1000 (
b1000 *
b100 )
b100 +
b100 ;
b100 4
13
b0 1
1"
#180
0"
#190
b1111 6
b1 /
b101 .
b1010001 '
b1010001 0
b1010001 <
b110 8
b1001 (
b1001 *
b101 )
b101 +
b101 ;
b101 4
03
1"
#200
0"
#210
b1110 .
b11100001 '
b11100001 0
b11100001 <
07
b1111 6
b1 8
b1010 (
b1010 *
b110 )
b110 +
b110 ;
b110 4
b1111 2
1"
#220
0"
#230
b1111 9
b0 /
b1001 .
b10 8
b10010000 '
b10010000 0
b10010000 <
b1011 (
b1011 *
b1 )
b1 +
b1 ;
b1 4
1"
#240
0"
#250
b1101 5
b1101 /
b11 .
b11 8
b111101 '
b111101 0
b111101 <
b1100 (
b1100 *
b1111 !
b1111 &
b1111 ,
b1111 :
b10 )
b10 +
b10 ;
b10 4
1"
#260
0"
#270
b1110 5
b1 /
b0 .
b1 '
b1 0
b1 <
b100 8
b1101 (
b1101 *
b11 )
b11 +
b11 ;
b11 4
b1101 1
1"
#280
0"
#290
b11 /
b1110 .
b11100011 '
b11100011 0
b11100011 <
b1110 5
b11 8
b1110 (
b1110 *
b100 )
b100 +
b100 ;
b100 4
b1110 1
1"
#300
0"
#310
b1111 5
b1 /
b0 .
b100 8
b1 '
b1 0
b1 <
b1111 (
b1111 *
b11 )
b11 +
b11 ;
b11 4
1"
#320
0"
#330
b11 /
b1110 .
b11100011 '
b11100011 0
b11100011 <
07
b1111 5
b11 8
b0 (
b0 *
b100 )
b100 +
b100 ;
b100 4
b1111 1
1"
#340
0"
#350
17
b0 5
b1 /
b0 .
b100 8
b1 '
b1 0
b1 <
b1 (
b1 *
b11 )
b11 +
b11 ;
b11 4
1"
#360
0"
#370
b11 /
b1110 .
b11100011 '
b11100011 0
b11100011 <
b0 5
b101 8
07
b10 (
b10 *
b100 )
b100 +
b100 ;
b100 4
13
b0 1
1"
#380
0"
#390
17
b0 6
b1 /
b101 .
b1010001 '
b1010001 0
b1010001 <
b110 8
b11 (
b11 *
b101 )
b101 +
b101 ;
b101 4
03
1"
#400
0"
#410
b1110 .
b11100001 '
b11100001 0
b11100001 <
b0 6
b111 8
07
b100 (
b100 *
b110 )
b110 +
b110 ;
b110 4
13
b0 2
1"
#420
0"
#430
b0 9
b0 /
b1011 .
b10110000 '
b10110000 0
b10110000 <
b1000 8
b101 (
b101 *
b111 )
b111 +
b111 ;
b111 4
03
1"
#440
0"
#450
b1111 9
b1111 /
b1001 8
b10111111 '
b10111111 0
b10111111 <
b110 (
b110 *
b0 !
b0 &
b0 ,
b0 :
b1000 )
b1000 +
b1000 ;
b1000 4
1"
#460
0"
#470
b111 /
b1111 .
b111 8
b11110111 '
b11110111 0
b11110111 <
b111 (
b111 *
b1111 !
b1111 &
b1111 ,
b1111 :
b1001 )
b1001 +
b1001 ;
b1001 4
1"
#480
0"
#490
b0 9
b0 /
b1011 .
b1000 8
b10110000 '
b10110000 0
b10110000 <
b1000 (
b1000 *
b111 )
b111 +
b111 ;
b111 4
1"
#500
0"
#510
b1111 9
b1111 /
b1001 8
b10111111 '
b10111111 0
b10111111 <
b1001 (
b1001 *
b0 !
b0 &
b0 ,
b0 :
b1000 )
b1000 +
b1000 ;
b1000 4
1"
#520
0"
#530
b111 /
b1111 .
b111 8
b11110111 '
b11110111 0
b11110111 <
b1010 (
b1010 *
b1111 !
b1111 &
b1111 ,
b1111 :
b1001 )
b1001 +
b1001 ;
b1001 4
1"
#540
0"
#550
b0 9
b0 /
b1011 .
b1000 8
b10110000 '
b10110000 0
b10110000 <
b1011 (
b1011 *
b111 )
b111 +
b111 ;
b111 4
1"
#560
0"
#570
b1111 9
b1111 /
b1001 8
b10111111 '
b10111111 0
b10111111 <
b1100 (
b1100 *
b0 !
b0 &
b0 ,
b0 :
b1000 )
b1000 +
b1000 ;
b1000 4
1"
#580
0"
#590
b111 /
b1111 .
b111 8
b11110111 '
b11110111 0
b11110111 <
b1101 (
b1101 *
b1111 !
b1111 &
b1111 ,
b1111 :
b1001 )
b1001 +
b1001 ;
b1001 4
1"
#600
0"
#610
b0 9
b0 /
b1011 .
b1000 8
b10110000 '
b10110000 0
b10110000 <
b1110 (
b1110 *
b111 )
b111 +
b111 ;
b111 4
1"
#620
0"
#630
b1111 9
b1111 /
b1001 8
b10111111 '
b10111111 0
b10111111 <
b1111 (
b1111 *
b0 !
b0 &
b0 ,
b0 :
b1000 )
b1000 +
b1000 ;
b1000 4
1"
#640
0"
#650
b111 /
b1111 .
b111 8
b11110111 '
b11110111 0
b11110111 <
b0 (
b0 *
b1111 !
b1111 &
b1111 ,
b1111 :
b1001 )
b1001 +
b1001 ;
b1001 4
1"
#655
